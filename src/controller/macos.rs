use std::env;
use std::marker::Send;
use std::sync::mpsc;

use ctrlc;

use controller::{ControllerInterface, ServiceMainFn};
use Error;
use ServiceEvent;

type MacosServiceMainWrapperFn = extern "system" fn(args: Vec<String>);

pub struct MacosController {
    /// Manages the service on the system.
    pub service_name: String,
    pub display_name: String,
    pub description: String,
}

impl MacosController {
    pub fn new(service_name: &str, display_name: &str, description: &str) -> MacosController {
        MacosController {
            service_name: service_name.to_string(),
            display_name: display_name.to_string(),
            description: description.to_string(),
        }
    }

    /// Register the `service_main_wrapper` function, this function is generated by the `Service!` macro.
    pub fn register(
        &mut self,
        service_main_wrapper: MacosServiceMainWrapperFn,
    ) -> Result<(), Error> {
        service_main_wrapper(env::args().collect());
        Ok(())
    }
}

impl ControllerInterface for MacosController {
    /// Creates the service on the system.
    fn create(&mut self) -> Result<(), Error> {
        unimplemented!()
    }
    /// Deletes the service.
    fn delete(&mut self) -> Result<(), Error> {
        unimplemented!()
    }
    /// Starts the service.
    fn start(&mut self) -> Result<(), Error> {
        unimplemented!()
    }
    /// Stops the service.
    fn stop(&mut self) -> Result<(), Error> {
        unimplemented!()
    }
}

/// Generates a `service_main_wrapper` that wraps the provided service main function.
#[macro_export]
macro_rules! Service {
    ($name:expr, $function:ident) => {
        extern "system" fn service_main_wrapper(args: Vec<String>) {
            dispatch($function, args);
        }
    };
}

#[doc(hidden)]
pub fn dispatch<T: Send + 'static>(service_main: ServiceMainFn<T>, args: Vec<String>) {
    let (tx, rx) = mpsc::channel();
    let _tx = tx.clone();

    ctrlc::set_handler(move || {
        let _ = tx.send(ServiceEvent::Stop);
    }).expect("Failed to register Ctrl-C handler");
    service_main(rx, _tx, args, false);
}
